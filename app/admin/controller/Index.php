<?php
/**
 * Created by PhpStorm.
 * Script Name: Index.php
 * Create: 2020/9/6 下午10:03
 * Description:
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace app\admin\controller;

use think\facade\Cache;
use app\constants\Bot;
use app\admin\model\Bot as BotM;

class Index extends Base
{
    /**
     * @var BotM
     */
    private $botM;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->botM = new BotM();
    }

    public function index(){
        return $this->show();
    }

    /**
     * @return mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\db\exception\DbException
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function welcome(){
        $bot_m = new BotM();
        $group_member_m = new \app\admin\model\BotGroupmember();
        $member_m = new \app\admin\model\BotMember();
        $bot_list = $bot_m->getAll([
            'where' => $this->staffWhere(),
            'field' => 'id,title,uin'
        ]);
        if(request()->isPost()){
            $end = strtotime(date('Ymd 00:00:00'));
            $begin = $end - 29 * 86400;
            $x_data = [];
            for($i = $begin; $i <= $end; $i+=86400){
                $x_data[] = date('m-d', $i);
            }
            //好友数据
            $legends = [];
            $series = [];
            $member_where = ['type' => Bot::FRIEND];
            foreach ($bot_list as $bot){
                $legends[] = $bot['title'];
                $temp = [
                    'name' => $bot['title'],
                    'data' => []
                ];
                $member_where['uin'] = $bot['uin'];
                for($i = $begin; $i <= $end; $i+=86400){
                    $member_where['create_time'] = ['between', [$i, $i + 86399]];
                    $temp['data'][] = $member_m->total($member_where);
                }
                $series[] = $temp;
            }
            //群员数据

            $return = [
                'member_data' => ['xData' => $x_data, 'legends' => $legends, 'series' => $series]
            ];
            $this->success('', null, $return);
        }
        $bots = $bot_m->getField('id,uin', $this->staffWhere());
        $bot_ids = array_keys($bots);
        $bot_wxids = array_values($bots);
        $where_member = ['uin' => ['in', $bot_wxids ? $bot_wxids : [0]], 'type' => Bot::FRIEND];
        $where_group = array_merge($where_member, ['type' => Bot::GROUP]);
        $where_today = ['create_time' => ['>', strtotime(date('Ymd 00:00:00'))]];
        $today_tj = model('tjGroup')->getOneByMap(array_merge($this->staffBotWhere(), ['day' => date('Y-m-d')]), true, true);

        $assign = [
            'bot_num' => count($bot_ids),
            'member_num' => [
                'total' => $member_m->total($where_member),
                'today' => $member_m->total(array_merge($where_member, $where_today))
            ],
            'group_num' => [
                'total' => $member_m->total($where_group),
                'today' => $member_m->total(array_merge($where_group, $where_today))
            ],
            'group_member' => [
                'total' => $group_member_m->total(['bot_id' => ['in', $bot_ids ? $bot_ids : [0]]]),
                'today_add' => empty($today_tj) ? 0:$today_tj['add_num'],
                'today_decr' => empty($today_tj) ? 0:$today_tj['decr_num']
            ],
            'bot_list' => $bot_list
        ];
        return $this->show($assign);
    }

    public function getGroupData(){
        if(request()->isPost()){
            $bot_ids = input('post.botid');
            if(empty($bot_ids) && $this->botM->total($this->staffWhere())){
                $this->error('至少选择一个机器人');
            }
            $end = strtotime(date('Ymd 00:00:00'));
            $begin = $end - 29 * 86400;
            $x_data = [];

            //好友数据
            $legends = ["进群人数", "退群人数", "净增人数"];

            $add_data = ['name' => '进群人数', 'data' => []];
            $decr_data = ['name' => '退群人数', 'data' => []];
            $netinc_data = ['name' => '净增人数', 'data' => []];
            $where = ['admin_id' => $this->adminInfo['id'], 'bot_id' => ['in', $bot_ids]];
            for($i = $begin; $i <= $end; $i+=86400){
                $x_data[] = date('m-d', $i);
                $where['day'] = date('Y-m-d', $i);
                $add_data['data'][] = model('tjGroup')->sums('add_num', $where);
                $decr_data['data'][] = model('tjGroup')->sums('decr_num', $where);
                $index = count($add_data['data']) - 1;
                $netinc_data['data'][] = $add_data['data'][$index] - $decr_data['data'][$index];
            }
            $series = [$add_data, $decr_data, $netinc_data];

            $return = ['xData' => $x_data, 'legends' => $legends, 'series' => $series];
            $this->success('', null, $return);
        }
    }

    /**
     * 清除缓存
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function clearCache(){
        Cache::clear();
        $this->success('清理成功');
    }

    /**
     * 获取初始化数据
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function getSystemInit(){
        $homeInfo = [
            'title' => '首页',
            'href'  => '/admin/index/welcome',
        ];
        $logoInfo = [
            'title' => config('system.site.company_title'),
            'href' => '/admin/index/index',
            'image' => '',
        ];
        $menuInfo = $this->getMenuList();
        $systemInit = [
            'homeInfo' => $homeInfo,
            'logoInfo' => $logoInfo,
            'menuInfo' => $menuInfo,
        ];
        return json($systemInit);
    }

    /**
     * 获取菜单列表
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * @author: fudaoji<fdj@kuryun.cn>
     */
    private function getMenuList(){
        $where = ['status' => 1, 'type' => 1];
        if($this->adminInfo['group_id'] != 1) {
            $adminGroup = model('admin/AdminGroup')->getOne($this->adminInfo['group_id']);
            $where['id'] = ['in', explode(',', $adminGroup['rules'])];
        }
        $menuList = model('admin/adminRule')->getAll([
            'filed' => 'id,pid,title,icon,href,target',
            'where' => $where,
            'order' => ['sort' => 'desc']
        ]);
        $menuList = $this->buildMenuChild(0, $menuList);
        return $menuList;
    }

    /**
     * 递归获取子菜单
     * @param $pid
     * @param $menuList
     * @return array
     * @author: fudaoji<fdj@kuryun.cn>
     */
    private function buildMenuChild($pid, $menuList){
        $treeList = [];
        foreach ($menuList as $v) {
            if ($pid == $v['pid']) {
                $node = $v;
                $child = $this->buildMenuChild($v['id'], $menuList);
                if (!empty($child)) {
                    $node['child'] = $child;
                }
                // todo 后续此处加上用户的权限判断
                $treeList[] = $node;
            }
        }
        return $treeList;
    }
}