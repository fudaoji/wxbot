<?php

/**
 * Created by PhpStorm.
 * Script Name: Setting.php
 * Create: 2020/5/24 上午10:25
 * Description: 站点配置
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace app\admin\controller;
use app\common\model\JsfTask as TaskM;
use app\common\service\BotMember;
use app\constants\Common;
use ky\Logger;

class Jsftask extends Botbase
{
    /**
     * @var TaskM
     */
    protected $model;
    /**
     * @var array
     */
    private $tabList;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new TaskM();
    }

    /**
     *
     * @return mixed
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function index(){
        $name = input('name', 'todo');
        if (request()->isPost()) {
            $post_data = input('post.');
            $where = ['bot_id' => $this->bot['id'], 'admin_id' => $this->adminInfo['id']];
            !empty($post_data['search_key']) && $where['wxids'] = ['like', '%' . $post_data['search_key'] . '%'];

            $total = $this->model->total($where);
            if ($total) {
                $list = $this->model->getList([$post_data['page'], $post_data['limit']],
                    $where, ['plan_time' => 'desc'], true, true
                );

                foreach ($list as $k => $v){
                    if($v['wxids']){
                        $jsfs = model('admin/botMember')->getField(['wxid','nickname','username'], ['wxid' => ['in', $v['wxids']], 'uin' => $this->bot['uin']]);
                        $_str = '';
                        if(count($jsfs)){
                            foreach ($jsfs as $jsf){
                                $_str .= $jsf['nickname'] . "(".($jsf['username'] ?: $jsf['wxid'])."),";
                            }
                            $v['jsf'] = trim($_str, ',');
                        }
                    }else{
                        $v['jsf'] = '无';
                    }

                    $v['create_time'] = date('Y-m-d H:i', $v['create_time']);
                    $v['plan_time'] = date('Y-m-d H:i', $v['plan_time']);
                    $v['complete_time'] = empty($v['complete_time']) ? '---' : date('Y-m-d H:i', $v['complete_time']);

                    $v['status'] = \app\common\service\JsfTask::statusList($v['status']);
                    $list[$k] = $v;
                }
            }else{
                $list = [];
            }

            $this->success('success', '', ['total' => $total, 'list' => $list]);
        }

        $builder = new ListBuilder();
        $builder->setSearch([
            ['type' => 'text', 'name' => 'search_key', 'title' => '关键词', 'placeholder' => '输入wxid搜索']
        ])
            ->setDataUrl(url('index', ['name' => $name]))
            ->addTopButton('addnew', ['title' => '发起检测'])
            ->addTableColumn(['title' => '检测开始时间', 'field' => 'create_time', 'minWidth' => 150])
            ->addTableColumn(['title' => '检测完成时间', 'field' => 'complete_time', 'minWidth' => 150])
            ->addTableColumn(['title' => '僵尸粉', 'field' => 'jsf', 'minWidth' => 300])
            ->addTableColumn(['title' => '任务状态', 'field' => 'status', 'minWidth' => 70])
            ->addTableColumn(['title' => '创建时间', 'field' => 'create_time', 'minWidth' => 150])
            /*->addTableColumn(['title' => '操作', 'minWidth' => 90, 'type' => 'toolbar'])
            ->addRightButton('self',['title' => '清理僵尸粉', 'href' => url('clearPost', ['id' => '__data_id__']), 'data-ajax' => 1, 'data-confirm' => 1])*/;

        return $builder->show();
    }

    /**
     * 清理僵尸粉
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function clearPost()
    {
        $id = input('id', null);
        $data = $this->model->getOneByMap(['id' => $id, 'admin_id' => $this->adminInfo['id']], true, true);

        if (!$data) {
            $this->error('参数错误');
        }
        if (!empty($data['is_cleared'])) {
            $this->error('此前已清理，请勿重复清理！');
        }
        $arr = explode(',', $data['wxids']);
        $count = 0;
        $fail = 0;
        foreach ($arr as $wxid){
            $res = model('admin/bot')->getRobotClient($this->bot)->deleteFriend([
                'robot_wxid' => $this->bot['uin'],
                'to_wxid' => $wxid,
            ]);
            if($res['code']) {
                BotMember::model()->delByMap(['wxid' => $wxid, 'uin' => $this->bot['uin']]);
                $count++;
            }else{
                $fail++;
            }
        }

        $this->model->updateOne([
            'id' => $id,
            'is_cleared' => 1
        ]);
        $this->success('此次成功清除僵尸粉'.$count."个，失败".$fail."个");
    }

    public function add()
    {
        $default = [
            'plan_time' => date('Y-m-d H:i:s')
        ];

        //todo  建议避开高峰期检测

        // 使用FormBuilder快速建立表单页面
        $builder = new FormBuilder();
        $builder->setMetaTitle('新增')
            ->setPostUrl(url('savePost'))
            ->addFormItem('plan_time', 'datetime', '开始检测时间', '不填则默认当前时间', [], '')
            ->setFormData($default);

        return $builder->show();
    }

    public function edit()
    {
        $id = input('id', null);
        $data = $this->model->getOneByMap(['id' => $id, 'admin_id' => $this->adminInfo['id']], true, true);

        if (!$data) {
            $this->error('参数错误');
        }

        if (!empty($data['complete_time'])) {
            $this->error('已完成的任务不能编辑');
        }


        // 使用FormBuilder快速建立表单页面
        $builder = new FormBuilder();
        $builder->setMetaTitle('编辑')
            ->setPostUrl(url('savePost'))
            ->addFormItem('id', 'hidden', 'ID', 'ID')
            ->addFormItem('plan_time', 'datetime', '开始检测时间', '不填则默认当前时间', [], '')
            ->setFormData($data);

        return $builder->show();
    }

    public function savePost($jump_to = '/undefined', $data = [])
    {
        $post_data = input('post.');
        $post_data['admin_id'] = $this->adminInfo['id'];
        $post_data['bot_id'] = $this->bot['id'];

        if(empty($post_data['plan_time'])){
            $post_data['plan_time'] = time();
        }else{
            $post_data['plan_time'] = strtotime($post_data['plan_time']);
        }
        if(empty($post_data[$this->pk])){
            $res = $this->model->addOne($post_data);
        }else {
            $res = $this->model->updateOne($post_data);
        }
        if($res){
            $this->success('数据保存成功', $jump_to);
        }else{
            $this->error('数据保存出错');
        }
    }
}