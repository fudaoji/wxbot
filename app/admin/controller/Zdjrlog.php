<?php

namespace app\admin\controller;
use app\common\model\zdjr\Log;
use think\facade\Db;
use app\common\model\zdjr\Rule;

class Zdjrlog extends Botbase
{
    /**
     * @var Log
     */
    protected $model;
    /**
     * @var Rule
     */
    private $ruleM;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new Log();
        $this->ruleM = new Rule();
    }

    /**
     * 设置
     * @return mixed
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function index(){
        if (request()->isPost()) {
            $post_data = input('post.');
            $where = ['log.admin_id' => $this->adminInfo['id']];
            !empty($post_data['search_key']) && $where['clue.content|clue.title'] = ['like', '%' . $post_data['search_key'] . '%'];
            !empty($post_data['bot_id']) && $where['bot.id'] = $post_data['bot_id'];
            !empty($post_data['rule_id']) && $where['log.rule_id'] = $post_data['rule_id'];
            $params = [
                'alias' => 'log',
                'join' => [
                    ['bot', 'bot.id=log.bot_id', 'left'],
                    ['zdjr_clue clue', 'clue.id=log.clue_id', 'left'],
                    ['zdjr_rule rule', 'rule.id=log.rule_id', 'left']
                ],
                'where' => $where,
                'refresh' => true
            ];

            $total = $this->model->totalJoin($params);
            if ($total) {
                $list = $this->model->getListJoin(array_merge($params, [
                    'limit' => [$post_data['page'], $post_data['limit']],
                    'field' => ['bot.title as bot_title', 'clue.title as clue_title','clue.content',
                        'log.*', 'rule.title as rule_title'
                    ],
                    'order' => ['log.id' => 'desc']
                ]));
            } else {
                $list = [];
            }
            $this->success('success', '', ['total' => $total, 'list' => $list]);
        }

        $builder = new ListBuilder();
        $builder->setSearch([
            ['type' => 'text', 'name' => 'search_key', 'title' => '关键词', 'placeholder' => '线索名称|线索账号'],
            ['type' => 'select', 'name' => 'bot_id', 'title' => '机器人', 'options' => [0 => '全部'] + $this->getBots()],
            ['type' => 'select', 'name' => 'rule_id', 'title' => '任务', 'options' => [0 => '全部'] + $this->ruleM->getField(['id','title'], ['admin_id' => $this->adminInfo['id']])]
        ])
            ->addTableColumn(['title' => '操作时间', 'field' => 'create_time', 'type' => 'datetime', 'minWidth' => 180])
            ->addTableColumn(['title' => '任务', 'field' => 'rule_title', 'minWidth' => 100])
            ->addTableColumn(['title' => '机器人', 'field' => 'bot_title', 'minWidth' => 100])
            ->addTableColumn(['title' => '线索名称', 'field' => 'clue_title', 'minWidth' => 100])
            ->addTableColumn(['title' => '线索账号', 'field' => 'content', 'minWidth' => 100])
            ->addTableColumn(['title' => '操作类型', 'field' => 'status', 'minWidth' => 80,'type' => 'enum','options' => $this->model->types()])
            ->addTableColumn(['title' => '搜索状态', 'field' => 'res', 'minWidth' => 80,'type' => 'enum','options' => $this->model->statusList()]);

        return $builder->show();
    }
}