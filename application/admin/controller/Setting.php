<?php

/**
 * Created by PhpStorm.
 * Script Name: Setting.php
 * Create: 2020/5/24 上午10:25
 * Description: 站点配置
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace app\admin\controller;
use app\common\model\Setting as SettingM;

class Setting extends Base
{
    /**
     * @var SettingM
     */
    protected $model;
    private $tabList;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new SettingM();
        $this->tabList = [
            'site' => [
                'title' => '平台设置',
                'href' => url('index', ['name' => 'site'])
            ],
            'send' => [
                'title' => '发单设置',
                'href' => url('index', ['name' => 'send'])
            ],
            'upload' => [
                'title' => '附件设置',
                'href' => url('index', ['name' => 'upload'])
            ],
            'sms' => [
                'title' => '短信设置',
                'href' => url('index', ['name' => 'sms'])
            ],
            /*'weixin' => [
                'title' => '微信设置',
                'href' => url('index', ['name' => 'weixin'])
            ]*/
        ];
    }

    /**
     * 设置
     * @return mixed
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function index(){
        $current_name = input('name', 'site');
        $setting = $this->model->getOneByMap(['name' => $current_name], true, true);
        if(request()->isPost()){
            $post_data = input('post.');
            unset($post_data['__token__']);
            if(empty($setting)){
                $res = $this->model->addOne([
                    'name' => $current_name,
                    'title' => $this->tabList[$current_name]['title'],
                    'value' => json_encode($post_data)
                ]);
            }else{
                $res = $this->model->updateOne([
                    'id' => $setting['id'],
                    'value' => json_encode($post_data)
                ]);
            }
            if($res){
                $this->model->settings(true);
                $this->success('保存成功');
            }else{
                $this->error('保存失败，请刷新重试', '', ['token' => request()->token()]);
            }
        }

        if(empty($setting)){
            $data = [];
        }else{
            $data = json_decode($setting['value'], true);
        }
        $builder = new FormBuilder();
        switch ($current_name){
            case 'send':
                if(empty($data)){
                    $data['step_tasktime'] = 600;
                    $data['step_grouptime'] = 1;
                }
                $builder->addFormItem('step_tasktime', 'number', '待发间隔时间(s)', '默认的待发间隔时间，单位秒', [], 'required min=1')
                    /*->addFormItem('step_grouptime', 'number', '群发间隔时间(s)', '单位秒', [], 'required min=1')*/;
                break;
            case 'weixin':
                $builder
                    ->addFormItem('appid', 'text', 'AppId', 'AppId', [], 'required maxlength=150')
                    ->addFormItem('secret', 'text', 'Secret', 'Secret', [], 'required maxlength=150')
                    ->addFormItem('pay_appid', 'text', '支付AppId', 'AppId', [], 'required maxlength=150')
                    ->addFormItem('pay_secret', 'text', '支付Secret', 'Secret', [], 'required maxlength=150')
                    ->addFormItem('pay_merchant_id', 'text', '商户ID', '商户ID', [], 'required maxlength=100')
                    ->addFormItem('pay_key', 'text', '支付秘钥', '支付秘钥', [], 'required maxlength=32 minlength=32')
                    ->addFormItem('pay_cert_path', 'textarea', '支付证书cert', '请在微信商户后台下载支付证书，用记事本打开apiclient_cert.pem，并复制里面的内容粘贴到这里。', [], 'maxlength=20000')
                    ->addFormItem('pay_key_path', 'textarea', '支付证书key', '请在微信商户后台下载支付证书，使用记事本打开apiclient_key.pem，并复制里面的内容粘贴到这里。', [], ' maxlength=20000')
                    ->addFormItem('pay_rsa_path', 'textarea', 'RSA公钥', '企业付款到银行卡需要RSA公钥匙');
                break;
            case 'site':
                empty($data) && $data['close'] = 0;
                $builder->addFormItem('company_title', 'text', '平台名称', '平台名称')
                    ->addFormItem('jdunion', 'legend', '京东联盟', '京东联盟')
                    ->addFormItem('jd_appkey', 'text', 'Appkey', '开放平台AppKey')
                    ->addFormItem('jd_appsecret', 'text', 'AppSecret', '开放平台AppSecret')
                    ->addFormItem('jd_unionid', 'text', '联盟ID', '平台的京东联盟ID')
                    ->addFormItem('period', 'text', '结算周期(天)', '结算周期(天)')
                    ->addFormItem('jtt', 'legend', '京推推开发者', '京推推开发者')
                    ->addFormItem('jtt_appid', 'text', 'Appid', '京推推Appid')
                    ->addFormItem('jtt_appkey', 'text', 'Appkey', '京推推Appkey');
                break;
            case 'upload':
                empty($data) && $data = [
                    'driver' => 'qiniu',
                    'file_size' => 53000000,
                    'image_size' => 5000000,
                    'image_ext' => 'jpg,gif,png,jpeg',
                    'file_ext' => 'jpg,gif,png,jpeg,zip,rar,tar,gz,7z,doc,docx,txt,xml,mp3,mp4,xls,xlsx,pdf',
                ];
                //$data['driver'] = 'qiniu';
                $builder->addFormItem('driver_title', 'legend', '上传驱动', '上传驱动')
                    ->addFormItem('driver', 'text', '上传驱动', '上传驱动')
                    ->addFormItem('qiniu_ak', 'text', '七牛accessKey', '七牛accessKey')
                    ->addFormItem('qiniu_sk', 'text', '七牛secretKey', '七牛secretKey')
                    ->addFormItem('qiniu_bucket', 'text', '七牛bucket', '七牛bucket')
                    ->addFormItem('qiniu_domain', 'url', '七牛domain', '七牛domain')
                    ->addFormItem('image_title', 'legend', '图片设置', '图片设置')
                    ->addFormItem('image_size', 'number', '图片大小限制', '单位B', [], 'required min=1 max=1000000000')
                    ->addFormItem('image_ext', 'text', '图片格式支持', '多个用逗号隔开', [], 'required')
                    ->addFormItem('file_title', 'legend', '文件设置', '文件设置')
                    ->addFormItem('file_size', 'number', '文件大小限制', '单位B', [], 'required min=1 max=1000000000')
                    ->addFormItem('file_ext', 'text', '文件格式支持', '多个用逗号隔开', [], 'required')
                    ->addFormItem('voice_title', 'legend', '音频设置', '音频设置')
                    ->addFormItem('voice_size', 'number', '音频大小限制', '单位B', [], 'required min=1 max=1000000000')
                    ->addFormItem('voice_ext', 'text', '音频格式支持', '多个用逗号隔开', [], 'required')
                    ->addFormItem('video_title', 'legend', '视频设置', '视频设置')
                    ->addFormItem('video_size', 'number', '视频大小限制', '单位B', [], 'required min=1 max=1000000000')
                    ->addFormItem('video_ext', 'text', '视频格式支持', '多个用逗号隔开', [], 'required')
                    ;
                break;
            case 'sms':
                $builder
                    ->addFormItem('sms_account', 'text', 'sms账号', 'sms账号', [], 'required maxlength=150')
                    ->addFormItem('sms_pwd', 'text', 'sms密码', 'sms密码', [], 'required maxlength=150')
                    ->addFormItem('sms_type', 'text', 'sms类型', 'sms类型', [], 'required maxlength=150');
                break;
        }
        $builder->setFormData($data);
        return $builder->show(['tab_nav' => ['tab_list' => $this->tabList, 'current_tab' => $current_name]]);
    }
}