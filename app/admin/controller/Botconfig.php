<?php

namespace app\admin\controller;
use app\admin\model\Admin as AdminM;
use app\common\model\BotConfig as ConfigM;
use app\common\service\BotMember;
use app\common\service\BotConfig as ConfigService;
use app\constants\Bot;

class Botconfig extends Bbase
{
    /**
     * @var ConfigM
     */
    protected $model;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new ConfigM();
    }

    /**
     * 设置
     * @return mixed
     * @throws \think\Exception
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function index()
    {
        $name = input('name', 'other');
        $id = input('id', 0);

        $bot = model('admin/bot')->getOneByMap(['id' => $id, 'admin_id' => AdminM::getCompanyId($this->adminInfo)]);
        if(empty($bot)){
            $this->error('非法请求！');
        }

        $settings = ConfigService::getConf(['bot_id' => $id]);
        if (empty($settings)) {
            $settings = [
                'command_on' => '/智能回答',
                'command_off' => '/人工回答',
            ];
        }
        if (!empty($settings['command_wxids'])) {
            $settings['command_wxids'] = explode(',', $settings['command_wxids']);
        } else {
            $settings['command_wxids'] = [];
        }

        $settings['bot_id'] = $id;
        $members = BotMember::getWxidToNickName(['uin' => $bot['uin'], 'type' => Bot::FRIEND]);
        $builder = new FormBuilder();
        $builder->setPostUrl(url('savepost', ['name' => $name, 'id' => $id]))
            ->setTabNav($this->botConfigTabs($id), $name)
            ->addFormItem('bot_id', 'hidden', 'id', 'id');
        switch ($name) {
            default:
                $builder->addFormItem('command_on', 'text', '启用机器人口令', '例如/智能回答', [], '')
                    ->addFormItem('command_off', 'text', '关闭机器人口令', '例如/人工回答', [], '')
                    ->addFormItem('command_wxids', 'chosen_multi', '口令指挥官', '不选则所有人发送的启用/关闭口令都会生效，默认机器人本号也是指挥官', $members);
                break;
        }

        return $builder->setFormData($settings)->show();
    }

    public function savePost($jump_to = '/undefined', $data = [])
    {
        $post_data = input('post.');

        unset($post_data['__token__']);
        foreach ($post_data as $k => $v) {
            if($k == 'bot_id') continue;
            if ($config = $this->model->getOneByMap(['bot_id' => $post_data['bot_id'], 'key' => $k],  true, true)) {
                $this->model->updateOne(['id' => $config['id'], 'value' => $v]);
            } else {
                $this->model->addOne([
                    'bot_id' => $post_data['bot_id'],
                    'key' => $k,
                    'value' => $v
                ]);
            }
        }
        ConfigService::getConf(['bot_id' => $post_data['bot_id']], '', true);
        $this->success('数据保存成功', $jump_to);
    }
}
