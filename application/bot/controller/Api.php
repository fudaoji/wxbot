<?php
/**
 * Created by PhpStorm.
 * Script Name: Onmessage.php
 * Create: 12/25/21 9:43 PM
 * Description:
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace app\bot\controller;

use app\admin\model\Bot;
use app\admin\model\BotGroupmember;
use app\admin\model\BotMember;
use app\bot\handler\cat\EventGroupMemberAdd;
use app\bot\handler\vlw\EventFriendVerify;
use app\bot\handler\vlw\EventPrivateChat;
use app\bot\handler\vlw\EventLogin;
use app\constants\Bot as BotConst;
use app\common\controller\BaseCtl;
use ky\WxBot\Driver\Vlw;
use ky\WxBot\Driver\Wxwork;
use ky\WxBot\Driver\Cat;
use ky\Helper;
use ky\Logger;

class Api extends BaseCtl
{

    /**
     * @var Bot
     */
    protected $botM;
    /**
     * @var BotMember
     */
    protected $memberM;
    /**
     * @var BotGroupmember
     */
    protected $groupMemberM;
    protected $bot;
    /**
     * @var Vlw|Wxwork|Cat
     */
    protected $botClient;
    protected $fromWxid = '';
    protected $botWxid = '';
    protected $groupWxid = '';
    protected $content;
    protected $group;
    protected $driver;
    protected $event;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        set_time_limit(0);
        Helper::$ajax = $this->getAjax();
        $this->driver = input('driver', BotConst::PROTOCOL_VLW);
        $this->checkEvent();
    }

    /**
     * 入口
     * tip:
     * 1.机器人对某个好友的私聊不会有回调
     * 2.机器人在群里发的情况下，from_wxid和from_group 都为空
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function index(){
        $class = "\\app\\bot\\handler\\{$this->driver}\\" . ucfirst($this->event);
        if(! class_exists($class)){
            Logger::error("class: " . $class . " not exists!");
            exit(0);
        }
        /**
         * @var $handler EventLogin|EventFriendVerify|EventPrivateChat|EventGroupMemberAdd
         */
        $handler = new $class();
        $handler->initData();
        $handler->handle();
    }

    /**
     * 全局参数
     * @throws \think\exception\DbException
     * @throws \Exception
     * Author: fudaoji<fdj@kuryun.cn>
     */
    protected function initData(){
        if(request()->isPost()) {
            switch ($this->driver){
                case BotConst::PROTOCOL_CAT:
                    $this->botWxid = $this->content['robot_wxid'];
                    $this->fromWxid = empty($this->content['final_from_wxid']) ? $this->botWxid : $this->content['final_from_wxid'];
                    break;
                default:
                    $this->botWxid = !empty(Helper::$ajax['content']['robot_wxid']) ? Helper::$ajax['content']['robot_wxid'] : Helper::$ajax['content']['Wxid'];
                    $this->fromWxid = empty($this->content['from_wxid']) ? $this->botWxid : $this->content['from_wxid'];
                    break;
            }
            $this->checkEvent();

            $this->botM = new Bot();
            $this->memberM = new BotMember();
            $this->groupMemberM = new BotGroupmember();
            sleep(1); //间隔两次请求做个随机等待
            $this->bot = $this->getBot($this->botWxid);
            $this->botClient = $this->botM->getRobotClient($this->bot);
        }else{
            Logger::error('Request invalid!');
            exit(0);
        }
    }

    private function checkEvent(){
        switch ($this->driver){
            case BotConst::PROTOCOL_CAT:
                $this->content = Helper::$ajax;
                $map = [
                    Cat::EVENT_FRIEND_MSG => BotConst::EVENT_PRIVATE_CHAT,
                    Cat::EVENT_GROUP_MSG => BotConst::EVENT_GROUP_CHAT,
                    Cat::EVENT_LOGIN => BotConst::EVENT_LOGIN,
                    Cat::EVENT_GROUP_MEMBER_ADD => BotConst::EVENT_GROUP_MEMBER_ADD,
                    Cat::EVENT_GROUP_MEMBER_DEC => BotConst::EVENT_GROUP_MEMBER_DEC
                ];
                $this->event = isset($map[Helper::$ajax['event']]) ? $map[Helper::$ajax['event']] : Helper::$ajax['event'];

                if($this->isGroupEvent()){
                    $this->groupWxid = $this->content['from_wxid'];
                }
                break;
            default:
                $this->content = Helper::$ajax['content'];
                $map = [
                    Vlw::EVENT_FRIEND_VERIFY => BotConst::EVENT_FRIEND_VERIFY,
                    Vlw::EVENT_LOGIN => BotConst::EVENT_LOGIN,
                ];
                $this->event = isset($map[Helper::$ajax['Event']]) ? $map[Helper::$ajax['Event']] : Helper::$ajax['Event'];

                if($this->isGroupEvent()){
                    $this->groupWxid = $this->content['from_group'];
                }
                break;
        }
    }

    protected function isGroupEvent(){
        return in_array($this->event, [
            BotConst::EVENT_GROUP_CHAT,
            BotConst::EVENT_GROUP_MEMBER_ADD,
            BotConst::EVENT_GROUP_MEMBER_DEC
        ]);
    }

    /**
     * @param string $uin
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws \think\exception\DbException Author: fudaoji<fdj@kuryun.cn>
     */
    private function getBot($uin = ''){
        $map = ['uin' => $uin, 'alive' => 1];
        if($this->event == BotConst::EVENT_LOGIN){
            unset($map['alive']);
        }
        if(! $bot = $this->botM->getOneByMap($map)) {
            Logger::error('Bot not exists or not logged in: ' . $uin);
            exit(0);
        }
        return $bot;
    }

    /**
     * @param string $nickname
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws \think\exception\DbException Author: fudaoji<fdj@kuryun.cn>
     */
    protected function getGroupMemberByNickname($nickname=''){
        $group = $this->memberM->getOneByMap(
            ['uin' => $this->bot['uin'], 'wxid' => $this->groupWxid],
            ['id']
        );
        return $this->groupMemberM->getOneByMap(['nickname' => $nickname, 'group_id' => $group['id']]);
    }
}