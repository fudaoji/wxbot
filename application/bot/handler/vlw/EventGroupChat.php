<?php
/**
 * Created by PhpStorm.
 * Script Name: EventGroupChat.php
 * Create: 3/19/22 11:39 PM
 * Description:
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace app\bot\handler\vlw;

use app\admin\model\BotMember;
use app\bot\controller\Api;
use ky\Bot\Vlw;
use ky\Logger;

class EventGroupChat extends Api
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->memberM = new BotMember();
    }

    /**
     * 群聊消息接收器
     */
    public function handle(){
        $this->groupWxid = $this->content['from_group'];
        $this->basic();
        $this->addon();
    }

    /**
     * 基本处理
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function basic(){
        switch ($this->content['type']){
            case Vlw::MSG_TEXT:
                $this->keyword();
                break;
        }
    }

    /**
     * 插件处理
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function addon(){
        controller('bot/tpzs')->groupChatHandle(); //推品助手，后期这部分应是动态获取
    }

    /**
     * 关键词回复
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function keyword(){
        $keyword = model('keyword')->getOneByMap([
            'bot_id' => $this->bot['id'],
            'keyword' => $this->content['msg'],
        ]);
        //Logger::error(strpos($keyword['wxids'], $this->groupWxid));
        if(!empty($keyword['status']) && (empty($keyword['wxids']) || strpos($keyword['wxids'], $this->groupWxid) !== false )){
            model('reply')->botReply($this->bot, $this->botClient, $keyword, $this->groupWxid, ['nickname' => $this->content['from_name']]);
        }
    }

    /**
     * 移出群
     * Author: fudaoji<fdj@kuryun.cn>
     */
    private function rmGroupMember(){
        if($this->groupWxid == 'R:10951134140940878'){
            if(($pos1 = strpos($this->content['msg'], "@") !== false)
                && ($pos2 = strpos($this->content['msg'], "[")) !== false
                && strpos($this->content['msg'], "[弱]") !== false
            ){
                $nickname = trim(substr($this->content['msg'], $pos1, $pos2-1));
                if(!empty($nickname) && $gm = $this->getGroupMemberByNickname($nickname)){
                    Logger::error($gm);
                    /*
                     * todo
                     * 1.根据昵称找到wxid
                     * 2.过滤白名单
                     * 3.判断是否达到群规设置的次数
                     * */
                    if(3){
                        $this->botClient->sendTextToFriends(
                            [
                                'robot_wxid' => $this->botWxid,
                                'to_wxid' => $this->groupWxid,
                                'msg' => "@".$nickname."你已经被[弱]3次，现将你移出群。"
                            ]
                        );
                        //踢出
                        if(! $res = $this->botClient->removeGroupMember(
                            [
                                'robot_wxid' => $this->botWxid,
                                'to_wxid' => $gm['wxid'],
                                'group_wxid' => $this->groupWxid
                            ]
                        )){
                            Logger::error($this->botClient->getError());
                        }
                    }else{
                        $this->botClient->sendTextToFriends(
                            [
                                'robot_wxid' => $this->botWxid,
                                'to_wxid' => $this->groupWxid,
                                'msg' => "@".$nickname."你已经被[弱]2次，当达到3次的时候会被移出群。若被误伤，请私聊管理员！！！"
                            ]
                        );
                    }
                }
            }
            //Logger::error(json_encode($this->content, JSON_UNESCAPED_UNICODE));
        }
    }

}