<?php

/**
 * Created by PhpStorm.
 * Script Name: Setting.php
 * Create: 2020/5/24 上午10:25
 * Description: 站点配置
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace app\admin\controller;

use app\common\model\GroupRule;
use app\constants\Rule as RuleConst;

class Rule extends Botbase
{
    /**
     * @var GroupRule
     */
    protected $model;
    private $tabList;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new GroupRule();
        $events = RuleConst::rules();
        foreach ($events as $k => $v){
            $this->tabList[$k] = [
                'title' => $events[$k],
                'href' => url('index', ['event' => $k])
            ];
        }
    }

    /**
     * 设置
     * @return mixed
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function index(){
        $current_name = input('event', RuleConst::RM);
        $reply = $this->model->getOneByMap(['rule' => $current_name, 'bot_id' => $this->bot['id']], true, true);
        if(request()->isPost()){
            $post_data = input('post.');
            if(empty($reply)){
                $res = $this->model->addOne($post_data);
            }else{
                $res = $this->model->updateOne($post_data);
            }
            if($res){
                $this->model->getOneByMap([
                    'bot_id' => $this->bot['id'],
                    'rule' => RuleConst::RM,
                ], true, true);
                $this->success('保存成功');
            }else{
                $this->error('保存失败，请刷新重试', '', ['token' => request()->token()]);
            }
        }

        $builder = new FormBuilder();
        if(empty($reply)){
            $reply = [
                'admin_id' => $this->adminInfo['id'],
                'bot_id' => $this->bot['id'],
                'media_id' => 0,
                'media_type' => '',
                'rule' => $current_name,
                'status' => 1
            ];
        }else{
            if(!empty($reply['wxids'])){
                $reply['wxids'] = explode(',', $reply['wxids']);
            }
            $builder->addFormItem('id', 'hidden', 'id', 'id');
        }
        $builder->addFormItem('admin_id', 'hidden', 'adminid', 'adminid')
            ->addFormItem('bot_id', 'hidden', 'botid', 'botid')
            ->addFormItem('rule', 'hidden', 'event', 'event')
            ->setFormData($reply);
        switch ($current_name){
            case RuleConst::RM:
                $groups = $this->getGroups();
                $builder->addFormItem('value', 'number', '容忍度', '10分钟内被群友发[弱]的次数达到设定值后移出群', [], 'required')
                    ->addFormItem('wxids', 'chosen_multi', '指定群', '指定群', $groups, 'required');
                break;
        }
        return $builder->addFormItem('status', 'radio', '状态', '状态', [1 => '启用', 0 => '禁用'], 'required')
            ->show(['tab_nav' => ['tab_list' => $this->tabList, 'current_tab' => $current_name]]);
    }
}