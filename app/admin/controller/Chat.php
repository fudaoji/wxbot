<?php

/**
 * User BaiXiantao
 * Date 2022/7/4
 * Time 14:00
 */

namespace app\admin\controller;

use app\admin\model\Bot as ModelBot;
use app\admin\model\BotMember;
use app\admin\model\BotSpeechcraft;
use app\admin\model\ChatLog;
use app\constants\Bot;

class Chat extends Base
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }


    public function index()
    {
        // $from_id = 1;  //将这里的formid为1，表示管理员
        // $to_id = 1;

        $this->assign('from_id', $this->adminInfo['id']);
        // $this->assign('to_id',$to_id);
        return $this->show();
        // return View::fetch();
    }


    public function test()
    {
        return $this->show();
    }

    public function getBot()
    {
        if (request()->isPost()) {
            $this->model = new ModelBot();
            $post_data = input('post.');
            $where = ['admin_id' => $this->adminInfo['id'], 'protocol' => ['<>', \app\constants\Bot::PROTOCOL_WEB]];
            !empty($post_data['search_key']) && $where['nickname|title|uuid'] = ['like', '%' . $post_data['search_key'] . '%'];
            $total = $this->model->total($where, true);
            if ($total) {
                $list = $this->model->getList(
                    [$post_data['page'], $post_data['limit']],
                    $where,
                    ['is_current' => 'desc'],
                    true,
                    true
                );
            } else {
                $list = [];
            }
            $this->success('success', '', ['total' => $total, 'list' => $list]);
        }
    }

    /**
     * 
     * 获取客服好友
     */
    public function getFriends()
    {
        $this->model = new BotMember();
        $bot_model = new ModelBot();
        if (request()->isPost()) {
            $post_data = input('post.');
            $this->bot = $bot_model->getOne($post_data['id']);
            $where = [['type','=', Bot::FRIEND], ['uin','=', $this->bot['uin']]];
            !empty($post_data['search_key']) && $where[] = ['nickname|remark_name|username|wxid','like', '%' . $post_data['search_key'] . '%'];
            $total = $this->model->where($where)->count();
            if ($total) {
                $list = $this->model->where($where)->page($post_data['page'])->limit($post_data['limit'])->order(['last_chat_time' => 'desc'])->select()->toArray();
                //  dump($this->model->getlastsql());exit;
                $redis = get_redis();
                $key = 'last_chat_log:' . $this->bot['uin'];
                $chat_log = $redis->hGetAll($key);
                foreach ($list as &$val) {
                    $hkey = $val['wxid'];
                    $last_chat_content = '';
                    if (isset($chat_log[$hkey])) {
                        $log = json_decode($chat_log[$hkey], true);
                        $last_chat_content = $log['content'];
                    }
                    $val['last_chat_content'] = $last_chat_content;
                }
            } else {
                $list = [];
            }

            $this->success('success', '', ['total' => $total, 'list' => $list]);
        }
    }

    /**
     * 
     * 发送消息
     */
    public function sendMsg()
    {
        if (request()->isPost()) {
            $post_data = input('post.');
            $bot_model = new ModelBot();
            $chat_model = new ChatLog();
            $member_model = new BotMember();
            $date = date("Y-m-d H:i:s");
            $year = date("Y");
            $time = time();
            $bot = $bot_model->getOne($post_data['bot_id']);
            $bot_client = $bot_model->getRobotClient($bot);
            // $res = $bot_client->sendTextToFriends(['robot_wxid' => $bot['uin'], 'to_wxid' => $post_data['to_wxid'], 'msg' => $post_data['content']]);
            $msgid = time().$this->adminInfo['id'];
            $insert_data = [
                'from' => $bot['uin'],
                'to' => $post_data['to_wxid'],
                'create_time' => $time,
                'content' => $post_data['content'],
                'year' => $year,
                'from_headimg' => $bot['headimgurl'],
                'msg_id' => $msgid,
                'type' => 'send',
                'msg_type' => 1//文本
            ];
            $id = $chat_model->partition('p' . $year)->insertGetId($insert_data);
            //更改好友最后聊天时间
            $member_model->where(['id' => $post_data['friend_id']])->update(['last_chat_time' => $time]);
            $friend = $member_model->where(['id' => $post_data['friend_id']])->find();
            $friend['last_chat_content'] = $post_data['content'];
            $result = [
                'msg_id' => $msgid,
                'date' => $date,
                'content' => $post_data['content'],
                'type' => 'send',
                'class' => 'my_chat_content',
                'quote' => $post_data['quote'],
                'headimgurl' => $bot['headimgurl'],
                'friend' => $friend
            ];
            //最后一条聊天记录放redis
            $redis = get_redis();
            $key = 'last_chat_log:' . $bot['uin'];
            $hkey = $post_data['to_wxid'];
            $redis->hSet($key, $hkey, json_encode($result));
            $this->success('success', '', $result);
        }
    }

    /**
     * 
     * 添加话术
     */
    public function addSpeechcraft()
    {
        $input = input();
        if (!isset($input['bot_id'])) {
            $this->error('请选择客服');
        }
        $id = $input['bot_id'];
        $data = ['bot_id' => $id];
        $builder = new FormBuilder();
        $builder->setMetaTitle('新增话术')
            ->setPostUrl(url('saveSpeechcraft'))
            ->addFormItem('bot_id', 'hidden', 'ID', 'ID')
            ->addFormItem('title', 'text', '标题', '标题', [], 'required')
            ->addFormItem('content', 'textarea', '话术', '内容', [], 'required')
            ->setFormData($data);
        return $builder->show();
    }

    /**
     * 
     * 保存话术
     */
    public function saveSpeechcraft()
    {
        $post_data = input('post.');
        $this->model = new BotSpeechcraft();
        unset($post_data['__token__']);
        if (empty($post_data['id'])) {
            $post_data['created_by'] = $this->adminInfo['id'];
            $res = $this->model->addOne($post_data);
        } else {
            $res = $this->model->updateOne($post_data);
        }

        if ($res) {
            $this->success('数据保存成功');
        } else {
            $this->error('数据保存出错');
        }
    }

    /**
     * 
     * 获取话术列表
     */
    public function getSpeechcraft()
    {
        if (request()->isPost()) {
            $this->model = new BotSpeechcraft();
            $post_data = input('post.');
            $where = ['bot_id' => $post_data['bot_id'], 'status' => 1];
            // !empty($post_data['search_key']) && $where['nickname|title|uuid'] = ['like', '%' . $post_data['search_key'] . '%'];
            $total = $this->model->total($where, true);
            if ($total) {
                $list = $this->model->getList(
                    [$post_data['page'], $post_data['limit']],
                    $where,
                    ['id' => 'desc'],
                    true,
                    true
                );
            } else {
                $list = [];
            }
            $this->success('success', '', ['total' => $total, 'list' => $list]);
        }
    }


    /**
     * 
     * 修改好友备注
     */
    public function saveRemark()
    {
        $post_data = input('post.');
        $this->model = new BotMember();
        $bot_model = new ModelBot();
        $bot = $bot_model->getOne($post_data['bot_id']);
        $bot_client = $bot_model->getRobotClient($bot);
        $bot_client->setFriendRemarkName(['to_wxid' => $post_data['to_wxid'], 'note' => $post_data['remark_name']]);
        $res = $this->model->updateOne(['id' => $post_data['id'], 'remark_name' => $post_data['remark_name']]);
        $this->success('数据保存成功');
    }
}
