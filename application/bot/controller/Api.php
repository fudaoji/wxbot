<?php
/**
 * Created by PhpStorm.
 * Script Name: Onmessage.php
 * Create: 12/25/21 9:43 PM
 * Description:
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace app\bot\controller;

use app\admin\model\Bot;
use app\admin\model\BotMember;
use app\common\controller\BaseCtl;
use ky\Bot\Vlw;
use ky\Helper;
use ky\Jtt;
use ky\Logger;

class Api extends BaseCtl
{

    /**
     * @var Bot
     */
    private $botM;
    /**
     * @var BotMember
     */
    private $memberM;
    private $bot;
    /**
     * @var Vlw
     */
    private $botClient;
    private $fromWxid = '';
    private $botWxid = '';
    private $content;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->botM = new Bot();
        $this->memberM = new BotMember();
        set_time_limit(0);
    }

    /**
     * vlw框架
     * tip:
     * 1.机器人对某个好友的私聊不会有回调
     * 2.机器人在群里发的情况下，from_wxid和from_group 都为空
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function vlw(){
        if(request()->isPost()) {
            sleep(rand(1,3)); //间隔两次请求做个随机等待
            Helper::$ajax = $this->getAjax();
            $this->botWxid = !empty(Helper::$ajax['content']['robot_wxid']) ? Helper::$ajax['content']['robot_wxid'] : Helper::$ajax['content']['Wxid'];
            $this->bot = $this->getBot($this->botWxid);
            $this->botClient = model('admin/bot')->getRobotClient($this->bot);
            //Logger::error(json_encode(Helper::$ajax, JSON_UNESCAPED_UNICODE));
            $this->content = Helper::$ajax['content'];
            $this->fromWxid = empty($this->content['from_wxid']) ? $this->botWxid : $this->content['from_wxid'];
            $event = Helper::$ajax['Event'];
            switch($event){
                case \app\constants\Bot::EVENT_FRIEND_VERIFY:
                    $this->eventFriendVerifyHandle();
                    break;
                case \app\constants\Bot::EVENT_LOGIN:
                    $this->eventLoginHandle();
                    break;
                case \app\constants\Bot::EVENT_GROUPCHAT:
                    $this->eventGroupChatHandle();
                    break;
                case \app\constants\Bot::EVENT_PRIVATECHAT:
                    $this->eventPrivateChatHandle();
                    break;
                case \app\constants\Bot::EVENT_DEVICE:
                    $this->eventDeviceHandle();
                    break;
            }
        }else{
            exit('非法请求');
        }
    }

    /**
     * 设备回调消息接收器
     * // HTTP(GET/POST)示例
    {
        "sdkVer": 5,  // SDK版本号
        "Event": "EventFrieneVerify", // 事件（易语言模板的子程序名）
        "content": {
            "robot_wxid": "",  // 机器人账号id
            "type": 1,  // 添加方式 请参考常量表
            "from_wxid": "",  // 请求者wxid
            "from_name": "",  // 请求者昵称
            "v1": "",
            "v2": "",
            "json_msg": {
                "to_wxid": "wxid_eu05e13ld28822",
                "to_name": "譬如朝露",
                "msgid": 1111250493,
                "from_wxid": "wxid_6ungmd6wtdh521",
                "from_nickname": "??[奸笑]??",
                "v1": "xxxxx",
                "v2": "xxxxx",
                "sex": 1,
                "from_content": "我是??[奸笑]??",
                "headimgurl": "http://wx.qlogo.cn/xxxxx",
                "type": 3
            },  // 友验证信息JSON(群内添加时，包含群id) (名片推荐添加时，包含推荐人id及昵称) (微信号、手机号搜索等添加时,具体JSON结构请查看日志）
            "robot_type": 0  // 来源微信类型 0 正常微信 / 1 企业微信
        }  // 内容（易语言模板的参数名）
    }
     */
    private function eventFriendVerifyHandle(){
        Logger::error(json_encode(Helper::$ajax['content'], JSON_UNESCAPED_UNICODE));
    }

    /**
     * 设备回调消息接收器: 机器人自己发群消息
     * {
            "sdkVer": 5,  // SDK版本号
            "Event": "EventDeviceCallback", // 事件（易语言模板的子程序名）
            "content": {
                "robot_wxid": "",  // 机器人账号id
                "type": 1,  // 消息类型
                "msg": "",  // 消息内容
                "to_wxid": "",  // 接收用户ID
                "to_name": "",  // 接收用户昵称
                "clientid": 0,  // 企业微信可用
                "robot_type": 0,  // 来源微信类型 0 正常微信 / 1 企业微信
                "msg_id": 0  // 消息ID
            }
        }
     */
    private function eventDeviceHandle(){
        $this->msgTransfer();
    }

    /**
     *  机器人消息转发
     */
    private function msgTransfer(){
        $content = Helper::$ajax['content'];
        $group_wxid = Helper::$ajax['Event'] == \app\constants\Bot::EVENT_GROUPCHAT ? $content['from_group'] : $content['to_wxid'];
        if($group_wxid == '20849217466@chatroom'){
            Logger::error(json_encode($this->content, JSON_UNESCAPED_UNICODE));
        }
        //1、判断当前群组是否是某个用户的中央调度群
        if($group = $this->memberM->getOneJoin([
            'alias' => 'm',
            'join' => [
                ['botConfig c', 'c.value=m.id']
            ],
            'where' => ['m.wxid' => $group_wxid, 'c.key' => 'central_group', 'm.uin' => $this->botWxid],
            'field' => ['c.admin_id', 'm.wxid']
        ])){
            $officer = model('admin/botConfig')->getOneByMap([
                'admin_id' => $group['admin_id'],
                'key' => 'officer'
            ], ['value'], true);
            if($officer && $officer['value'] != $this->fromWxid){ //设置了指挥官且当前发信人不是指挥官则退出
                return;
            }

            //2.取出机器人负责的群并转发
            $team = model('admin/botTeam')->getOneByMap([
                'admin_id' => $group['admin_id'],
                'bot_id' => $this->bot['id']
            ], ['groups']);

            if($team){
                $groups = explode(',', $team['groups']);
                switch($content['type']){
                    case Vlw::MSG_IMG:
                        $path = str_replace(['[pic=', ']'], '', $content['msg']);
                        $this->botClient->sendImgToFriends(['robot_wxid' => $content['robot_wxid'], 'to_wxid' => $groups, 'path' => $path]);
                        break;
                    default:
                        $this->botClient->sendTextToFriends(['robot_wxid' => $content['robot_wxid'], 'to_wxid' => $groups, 'msg' => $content['msg']]);
                        break;
                }
            }
        }
    }

    /**
     * 私聊消息接收器
     */
    private function eventPrivateChatHandle(){
        $fdj = "wxid_xokb2ezu1p6t21";
        $qy_exter_yxg = '7881301713149756';
        $qy_group = 'R:10951134140940878';
        $yyp = 'weiwei562608';
        $jane = "wxid_a98qqf9m4bny22";

        if($this->fromWxid == $qy_exter_yxg){
            Logger::error(json_encode(Helper::$ajax, JSON_UNESCAPED_UNICODE));
            $res = $this->botClient->sendImgToFriends([
                'robot_wxid' => $this->botWxid,
                'to_wxid' => $qy_group,
                'path' => "https://www.liangcang.cc/static/img/qrcode.c2f2668b.png"
            ]);
            //Logger::error(json_encode($res, JSON_UNESCAPED_UNICODE));
        }
    }

    /**
     * 群聊消息接收器
     */
    private function eventGroupChatHandle(){
        $this->msgTransfer();
    }

    /**
     *  登录、退出事件处理器
     *  {"sdkVer":5,"Event":"Login","content":{"type":1,"Wxid":"wxid_xokb2ezu1p6t21","robot_type":0}}
     */
    private function eventLoginHandle(){
        $content = Helper::$ajax['content'];
        $this->botM->updateOne(['id' => $this->bot['id'], 'alive' => $content['type'] ? 0 : 1]);
    }

    /**
     * @param string $driver
     * @param array $options
     * @return Vlw
     */
    private function getBotClient($driver = 'vlw', $options = []){
        switch ($driver){
            default:
                $client = new Vlw($options);
                break;
        }
        return $client;
    }

    /**
     * @param string $uin
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws \think\exception\DbException Author: fudaoji<fdj@kuryun.cn>
     */
    private function getBot($uin = ''){
        if(! $bot = $this->botM->getOneByMap(['uin' => $uin])) {
            exit('机器人不存在');
        }
        return $bot;
    }

    /**
     * @param string $username
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws \think\exception\DbException Author: fudaoji<fdj@kuryun.cn>
     */
    private function getMember($username=''){
        return $this->memberM->getOneByMap(['username' => $username]);
    }
}