<?php

/**
 * Created by PhpStorm.
 * Script Name: Setting.php
 * Create: 2020/5/24 上午10:25
 * Description: 站点配置
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace app\admin\controller;
use app\common\model\Setting as SettingM;
use app\common\service\AdminGroup as GroupService;
use app\constants\Common;

class Setting extends Base
{
    /**
     * @var SettingM
     */
    protected $model;
    private $tabList;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new SettingM();
        $this->tabList = [
            'site' => [
                'title' => '平台设置',
                'href' => url('index', ['name' => 'site'])
            ],
            'bot' => [
                'title' => '机器人设置',
                'href' => url('index', ['name' => 'bot'])
            ],
            'oauth' => [
                'title' => '登录设置',
                'href' => url('index', ['name' => 'oauth'])
            ],
            'upload' => [
                'title' => '附件设置',
                'href' => url('index', ['name' => 'upload'])
            ],
            'protocol' => [
                'title' => '协议设置',
                'href' => url('index', ['name' => 'protocol'])
            ],
            /*'addon' => [
                'title' => '应用插件',
                'href' => url('index', ['name' => 'addon'])
            ],*/
        ];
    }

    /**
     * 设置
     * @return mixed
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function index(){
        $current_name = input('name', 'site');
        $setting = $this->model->getOneByMap(['name' => $current_name], true, true);
        if(request()->isPost()){
            $post_data = input('post.');
            unset($post_data['__token__']);
            if(empty($setting)){
                $res = $this->model->addOne([
                    'name' => $current_name,
                    'title' => $this->tabList[$current_name]['title'],
                    'value' => json_encode($post_data, JSON_UNESCAPED_UNICODE)
                ]);
            }else{
                $res = $this->model->updateOne([
                    'id' => $setting['id'],
                    'value' => json_encode($post_data, JSON_UNESCAPED_UNICODE)
                ]);
            }
            if($res){
                $this->model->settings(true);
                $this->success('保存成功');
            }else{
                $this->error('保存失败，请刷新重试', '', ['token' => request()->token()]);
            }
        }

        if(empty($setting)){
            $data = [];
        }else{
            $data = json_decode($setting['value'], true);
        }
        $builder = new FormBuilder();
        switch ($current_name){
            case 'oauth':
                $builder->addFormItem('apiurl', 'text', 'API地址', 'API地址')
                    ->addFormItem('appid', 'text', 'Appid', 'Appid')
                    ->addFormItem('appkey', 'text', 'Appsecret', 'Appsecret')
                    ->addFormItem('switch_wx', 'radio', '微信登录', '是否开启微信登录', [1 => '开启', 0 => '关闭']);
                break;
            case 'protocol':
                $builder->addFormItem('user', 'ueditor', '用户服务协议', '用户服务协议', [], 'required');
                break;
            case 'addon':
                $builder->addFormItem('addons', 'textarea', '扩展插件', '一般无需配置');
                break;
            case 'bot':
                !isset($data['seat_default']) && $data['seat_default'] = 0;
                !isset($data['seat_price']) && $data['seat_price'] = 0.0;
                $builder->addFormItem('step_time', 'text', '群发间隔时间', '格式：1-4，单位秒')
                    ->addFormItem('file_storage_path', 'text', '微信文件保存位置', '请到微信客户端-》设置-》文件位置查看，填写“WeChat Files”之前的部分')
                    //->addFormItem('app_key', 'text', '默认AppKey', '机器人框架的appkey')
                    //->addFormItem('url', 'text', '默认接口地址', '默认接口地址')
                    ->addFormItem('seat', 'legend', '微信号席位', '微信号席位')
                    ->addFormItem('seat_default', 'number', '默认额度', '注册客户默认有几个微信号席位', [], 'min=0')
                    ->addFormItem('seat_price', 'text', '售价', '每个号每月的费用', [], 'min=0');
                break;
            case 'site':
                empty($data) && $data['close'] = 0;
                empty($data['home_theme']) && $data['home_theme'] = 'default';
                $builder->addFormItem('app_title', 'text', '平台名称', '平台名称', [], 'required')
                    ->addFormItem('slogan', 'textarea', 'Slogan', 'Slogan')
                    ->addFormItem('company_title', 'text', '公司名称', '公司名称', [], 'required')
                    ->addFormItem('logo', 'picture_url', '前台Logo', '比例860x200', [], 'required')
                    ->addFormItem('kefu_qrcode', 'picture_url', '客服二维码', '客服二维码', [])
                    ->addFormItem('seo_keywords', 'textarea', 'SEO关键词', 'SEO关键词')
                    ->addFormItem('seo_description', 'textarea', 'SEO描述', 'SEO描述')
                    ->addFormItem('home_theme', 'text', '前台皮肤', '默认default，非开发者请勿改动')
                    ->addFormItem('switch_reg', 'radio', '开放注册', '开放注册', Common::yesOrNo(), 'required')
                    ->addFormItem('default_group_id', 'select', '新用户默认分组', '新用户默认分组', GroupService::getTenantGroupIdToTitle($this->adminInfo), 'required')
                    ->addFormItem('app_free_days', 'number', '应用可试用时间', '单位/天', [], 'required min=0')
                    ->addFormItem('icp', 'text', '备案号', '备案号')
                    ->addFormItem('tongji', 'textarea', '统计代码', '统计代码')
                    ->addFormItem('close', 'radio', '关闭网站', '关闭网站', Common::yesOrNo(), 'required')
                    ->addFormItem('close_reason', 'textarea', '关闭原因', '关闭原因')
                    ->addFormItem('backend_logo', 'picture_url', '后台Logo', '比例1:1');
                break;
            case 'upload':
                empty($data) && $data = [
                    'driver' => 'qiniu',
                    'file_size' => 53000000,
                    'image_size' => 5000000,
                    'image_ext' => 'jpg,gif,png,jpeg',
                    'file_ext' => 'jpg,gif,png,jpeg,zip,rar,tar,gz,7z,doc,docx,txt,xml,mp3,mp4,xls,xlsx,pdf',
                ];
                //$data['driver'] = 'qiniu';
                $builder->addFormItem('driver_title', 'legend', '上传驱动', '上传驱动')
                    ->addFormItem('driver', 'radio', '上传驱动', '上传驱动', model('upload')->locations())
                    ->addFormItem('qiniu', 'legend', '七牛参数', '七牛参数')
                    ->addFormItem('qiniu_ak', 'text', '七牛accessKey', '七牛accessKey')
                    ->addFormItem('qiniu_sk', 'text', '七牛secretKey', '七牛secretKey')
                    ->addFormItem('qiniu_bucket', 'text', '七牛bucket', '七牛bucket')
                    ->addFormItem('qiniu_domain', 'url', '七牛domain', '七牛domain')
                    ->addFormItem('aliyun', 'legend', '阿里云oss参数', '阿里云oss参数')
                    ->addFormItem('aliyun_ak', 'text', 'AccessKeyId', 'AccessKeyId')
                    ->addFormItem('aliyun_sk', 'text', 'AccessKeySecret', 'AccessKeySecret')
                    ->addFormItem('aliyun_bucket', 'text', 'bucket', 'bucket')
                    ->addFormItem('aliyun_domain', 'url', '域名', '域名')
                    ->addFormItem('qcloud', 'legend', '腾讯云oss参数', '腾讯云oss参数')
                    ->addFormItem('qcloud_ak', 'text', 'secretId', 'secretId')
                    ->addFormItem('qcloud_sk', 'text', 'secretKey', 'secretKey')
                    ->addFormItem('qcloud_region', 'text', '区域region', '区域region')
                    ->addFormItem('qcloud_bucket', 'text', 'bucket', 'bucket')
                    ->addFormItem('qcloud_domain', 'url', '域名', '域名')
                    ->addFormItem('rule', 'legend', '上传规则', '上传规则')
                    ->addFormItem('image_title', 'legend', '图片设置', '图片设置')
                    ->addFormItem('image_size', 'number', '图片大小限制', '单位B', [], 'required min=1 max=1000000000')
                    ->addFormItem('image_ext', 'text', '图片格式支持', '多个用逗号隔开', [], 'required')
                    ->addFormItem('file_title', 'legend', '文件设置', '文件设置')
                    ->addFormItem('file_size', 'number', '文件大小限制', '单位B', [], 'required min=1 max=1000000000')
                    ->addFormItem('file_ext', 'text', '文件格式支持', '多个用逗号隔开', [], 'required')
                    ->addFormItem('voice_title', 'legend', '音频设置', '音频设置')
                    ->addFormItem('voice_size', 'number', '音频大小限制', '单位B', [], 'required min=1 max=1000000000')
                    ->addFormItem('voice_ext', 'text', '音频格式支持', '多个用逗号隔开', [], 'required')
                    ->addFormItem('video_title', 'legend', '视频设置', '视频设置')
                    ->addFormItem('video_size', 'number', '视频大小限制', '单位B', [], 'required min=1 max=1000000000')
                    ->addFormItem('video_ext', 'text', '视频格式支持', '多个用逗号隔开', [], 'required')
                    ;
                break;
        }
        $builder->setFormData($data);
        return $builder->show(['tab_nav' => ['tab_list' => $this->tabList, 'current_tab' => $current_name]]);
    }
}